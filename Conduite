#########################

1 - Connect to Mongo and write data
  . Create a directory node-todo-api
  . npm init
  . Playground
    -	Mongodb-connect.js
    -	Npm I mongodb â€“save

  . In mongodb-connect.js

  const MongoClient = require('mongodb').MongoClient;

  MongoClient.connect('mongodb://localhost:27017/TodoApp',
  (err, db) => {
    if (err){
      return console.log('Unable to connect to MongoDB server');
    }
    console.log('Connected to MongoDB server');
    db.collection('Users').insertOne({
      name: 'Henri',
      age: '25',
      location: 'Paris'
    }, (err, result) => {
      if(err){
        return console.log('Unable to insert user', err);
      }

      console.log(JSON.stringify(result.ops, undefined, 2));

    });

    db.close();
}

. node playground/mongodb-connect.js

2 - ObjectId
- Mongo was designed to scaled out easily;
- you can specify _id property
- You can get id from 'result.ops[0]._id'
- Timestamp with 'result.ops[0]._id.getTimestamp()'

- ES6 object destructuring: takes a property from object and into variable
  . var user = {name: 'andrew', age:25}
  . var {name} = user;

- const {MongoClient, ObjectID} = require('mongodb'); // identical from above
-  var obj = new ObjectID();
   console.log(obj);

#########################

3 - Fetching Data
- Robo 3T : dans Todos, clic droit, "insert document"
- db.collection('Todos').find() : retourne tous les documents

- find.toArray() --> retourne une promesse de montrer le document en array

--> db.collection('Todos').find().toArray().then((docs) => {
  console.log('Todos');
  console.log(JSON.stringify(docs, undefined, 2));
}, (err) => {
  console.log('Unable to fetch todos', err);
});

- .find({completed: false}) : query que ceux dont completed : false

- .find({_id: '5970fb4bd4e3c31a29e50cfb'})
--> NE MARCHERA PAS car ce n'est pas un string
  --> .find({
    _id: new ObjectID('5970fb4bd4e3c31a29e50cfb')
  })

- Method count for Cursor in API doc
db.collection('Todos').find().count().then((count) => {
  console.log(`Todos count: ${count}`);
  //console.log(JSON.stringify(docs, undefined, 2));
}, (err) => {
  console.log('Unable to fetch todos', err);
});

........
CrÃ©er un .gitignore
  - taper node_modules/
........

#########################

4 - Deleting documents
- deleteMany
  .. db.collection('Todos').deleteMany({text: 'Eat lunch'}).then((result) => {
      console.log(result);
    });
  .. result: { n: 3, ok: 1 }

- deleteOne
  . Deletes the first record
  db.collection('Todos').deleteOne({text: 'Eat lunch'}).then((result) => {
    console.log(result);
  });

- findOneAndDelete
  .. Get the record back
  .. db.collection('Todos').findOneAndDelete({completed: false}).then((result) => {
    console.log(result);
  })

#########################

5 - Updating documents
. https://docs.mongodb.com/manual/reference/operator/update/
..   db.collection('Users').findOneAndUpdate(
    {_id: new ObjectID('597355f308255d7041f2e433')},
    { $inc: {age: 1} },
    {returnOriginal: false}
  ).then((result) => {console.log(result)});
. $set, $inc (opÃ©rateurs d'actualisation)

#########################

6 - Mongoose ORM
Object Relational Mapping
Structure data
. mongoosejs.com
npm i mongoose --save

#########################

7 - Setting up mongoose
. var mongoose = require('mongoose');
  mongoose.Promise = global.Promise;
  mongoose.connect('mongodb://localhost:27017/TodoApp');

. mongoose works with MODELS
  .. var Todo = mongoose.model('Todo', {
    text: {
      type: String
    },
    completed: {
      type: Boolean
    },
    completedAt: {
      type: Number
    }
  });

.  var newTodo = new Todo({
   text: 'Doing dishes'
 });

. newTodo.save().then((doc) => {
  console.log('Saved todo', doc);
}, (e) => {
  console.log('Unable to save todo')
})

8 - Validators, types, defaults
. mongoose validators
. mongoose schemas
.. var Todo = mongoose.model('Todo', {
  text: {
    type: String,
    required: true,
    minlength: 1,
    trim: true
  },
  completed: {
    type: Boolean,
    default: false
  },
  completedAt: {
    type: Number,
    default: null
  }
});
. If you put a number instead of text, it will be cast as string

#########################

8 - Postman et al.

. server/db/mongoose.js
. server/models/todo.js
. server/models/user.js

. var express = require('express');
var bodyParser = require('body-parser');

var {mongoose} = require('./db/mongoose');
var {Todo} = require('./models/todo');
var {User} = require('./models/user');

// install express
// body-parse : send JSON to server

var app = express();

// middlewares

app.use(bodyParser.json());

// resource creation
app.post('/todos', (req, res) => {
  console.log(req.body);
  var todo = new Todo({
    text: req.body.text
  });

/* https://httpstatuses.com/ */

  todo.save().then((doc) => {
    res.send(doc);
  }, (e) => {
    res.status(400).send(e);
  });
});

// GET /todos/

app.listen(3000, () => {
  console.log('Started on port 3000');
});

. Dans Postman, /POST JSON

#########################

9 - Testing POST /todos

. npm i expect, mocha, nodemon, supertest

. describe block {test cases, group all routes}

. Route test
  ..   it('should create a new todo', (done) => {
      var text = 'Test todo text';

      request(app)
        .post('/todos')
        .send({text})
        .expect(200)
        .expect((res) => {
          expect(res.body.text).toBe(text);
        })
        .end((err, res) => {
          if (err) {
            return done(err);
          }

          Todo.find().then((todos) => {
            expect(todos.length).toBe(1);
            expect(todos[0].text).toBe(text);
            done();
          }).catch((e) => done(e));

        });

. Clean all todos prior
... beforeEach((done) => {
  Todo.remove({}).then(() => {
    done();
  })
});

. In package.json
...  "scripts": {
    "test": "mocha server/**/*.test.js",
    "test-watch": "nodemon --exec 'npm test'"
  },

#########################

10 - List Resources - GET /todos

// GET /todos/ in server.js

app.get('/todos', (req, res) => {
  Todo.find().then((todos) => {
    res.send({
      todos,
    });
  }, (e) => {
    res.status(400).send(e);
  })
});
